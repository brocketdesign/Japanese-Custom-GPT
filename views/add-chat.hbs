<!DOCTYPE html>
<html lang="ja">
   {{> dashboard-header}}
<body>
    {{> dashboard-nav}}

    <style>
    label{
        font-size: 14px;
        color: #aaaaaa;
    }
    #sendMessage,
    #chatInput .load {
        border-left: 0 !important;
        border-radius: 0px 30px 30px 0px !important;
    }
    #userMessage {
        border-radius: 30px 0px 0px 30px !important;
        background-color: #f8f9fa;
    }
    #userMessage:focus {
        outline: none;
        box-shadow: none; /* If there is a box shadow applied on focus */
    }
    </style>
<div class="container mt-4">
    <h2 class="d-none">{{#if chatId}}チャットを編集{{else}}新しいチャットを追加{{/if}}</h2>
    <div id="imageSection" class="text-center mb-4" >
        <div class="mx-auto p-auto text-center d-flex align-items-center justify-content-center">
            <img id="chatImage" src="/img/logo.webp" alt="chat Thumbnail" class="rounded-circle" style="width: 100px; height: 100px; object-fit: cover;cursor: pointer;">
        </div>
    </div>
    <div id="chatInput" class="input-group rounded-0 rounded-bottom mt-5 mb-4" style="bottom: 0px;right: 0;left: 0;width: auto;margin: auto;">
        <input type="text" id="userMessage" class="form-control py-3" placeholder="チャットについて教えてください">
        <button id="sendMessage" class="btn btn-light px-4 border"><i class="fas fa-paper-plane"></i></button>
        <div class="load bg-light px-4 d-flex justify-content-center align-items-center border d-none">
            <div class="spinner-grow spinner-grow-sm text-dark" role="status"><span class="visually-hidden">Loading...</span></div>
        </div>
    </div>
    <button type="button" id="displayProcess" class="badge btn-ligh text-muted border mb-2 mx-3" style="font-size: 12px;border-radius:40px">プロセスを表示する</button>
    <div id="displayProcessToggle" class="mb-3 mx-3 d-none">
        <label for="chatContent" class="form-label d-none">チャットコンテンツ (JSON形式)</label>
        <textarea class="form-control" id="chatContent" name="content" rows="10" required></textarea>
    </div>
    <form id="chatForm" class="mb-5 pb-5 mx-3 d-none">
        <div class="mb-3 mx-3" id="thumbnailInputContainer" style="display: none;">
            <label for="chatThumbnail" class="form-label">チャットのサムネイルをアップロード</label>
            <input type="file" class="form-control" id="chatThumbnail" name="thumbnail" accept="image/*">
        </div>
        <div class="mb-3 mx-3">
            <label for="chatName" class="form-label">チャット名</label>
            <input type="text" class="form-control" id="chatName" name="name" required>
        </div>
        <div class="mb-3 mx-3">
            <label for="chatDescription" class="form-label">チャット</label>
            <textarea class="form-control" id="chatDescription" name="content" rows="3" required></textarea>
        </div>
        <div class="container mt-1">
            <label for="chatContentEdition" class="form-label">チャットの構造</label>
            <div id="chatContentEdition"></div>
            <button type="button" id="saveButton" class="btn btn-primary mt-3 d-none">Save</button>
        </div>
        <button type="submit" class="btn btn-secondary btn-large w-100">保存する</button>
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function() {
        var count = 0
        let chatId = '{{chatId}}';

        if (chatId) {
            fetchchatData(chatId);
        }

        $('#chatImage').click(function() {
            $('#chatThumbnail').click();
        });

        $('#chatThumbnail').change(function(event) {
            const reader = new FileReader();
            reader.onload = function(e) {
                $('#chatImage').attr('src', e.target.result).show();
            }
            reader.readAsDataURL(event.target.files[0]);
        });

        function fetchchatData(chatId) {
            $.ajax({
                url: `/api/chat/${chatId}`,
                type: 'GET',
                dataType: 'json',
                success: function(chatData) {
                    $('#chatName').val(chatData.name);
                    $('#chatDescription').val(chatData.description);
                    if(chatData.content){
                        $('#chatContent').val(JSON.stringify(chatData.content, null, 2));
                        createEditor(chatData.content)
                    }

                    if (chatData.thumbnailUrl && chatData.thumbnailUrl != undefined) {
                        $('#chatImage').attr('src', chatData.thumbnailUrl).show();
                    }
                        $('#chatForm').toggleClass('d-none')
                },
                error: function(xhr, status, error) {
                    Swal.fire({
                        title: 'エラー!',
                        text: 'チャットの読み込みに失敗しました: ' + error,
                        icon: 'error',
                        confirmButtonText: 'Ok',
                        showCancelButton: true,
                        cancelButtonText: '一覧を見る'
                    }).then((result) => {
                        if (result.dismiss === Swal.DismissReason.cancel) {
                            window.location.href = '/chats';
                        }
                    });
                }
            });
        }
        $('#chatForm').on('submit', function(e) {
            e.preventDefault();

            const formData = new FormData();
            const name = $('#chatName').val();
            const content = saveJson();
            const description = $('#chatDescription').val();
            const thumbnail = $('#chatThumbnail')[0].files[0];

            formData.append('name', name);
            formData.append('description', description);
            formData.append('content', content);
            
            if(thumbnail){
                formData.append('thumbnail', thumbnail);
            }
            if(chatId){
                formData.append('chatId', chatId)
            }
            $.ajax({
                url: '/api/add-chat',
                type: 'POST',
                processData: false,
                contentType: false,
                data: formData,
                success: function(response) {
                    Swal.fire(
                        '成功!',
                        'チャットが正常に追加されました!',
                        'success'
                    ).then(()=>{
                        window.location = '/chat-list'
                    });
                },
                error: function(error) {
                    Swal.fire(
                        'エラー!',
                        'チャットの追加に失敗しました: ' + error.responseJSON.error,
                        'error'
                    );
                }
            });
        });

   
        // Event handler for the send button
        $('#sendMessage').on('click', function() {
            generateCompletion();
        });

        // Event handler for the Enter key
        $('#userMessage').on('keypress', function(event) {
            if (event.which == 13) { // Enter key is pressed
                generateCompletion();
            }
        });

        function generateCompletion(callback) {

            const apiUrl = '/api/openai-chat-creation';
            const message = $('#userMessage').val();
            const chatId = 'chat_' + Date.now();
            
            // Clear the chatContent area only if it's not empty
            if ($('#chatContent').val().trim() !== '') {
                $('#chatContent').val('');
            }        
            $('#chatInput .load').toggleClass('d-none')
            $('#sendMessage').toggleClass('d-none')
            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message, system : getSystem('chatContent') }),
                success: function(response) {

                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                        // Update the bot response container with the new content
                        $('#chatContent').val($('#chatContent').val() + data.content);

                    };

                    eventSource.onerror = function(error) {
                        console.log('EventSource failed.');
                        eventSource.close();

                        // Clean the JSON string when the stream ends
                        let cleanedContent = cleanJsonString(markdownContent);
                        $('#chatContent').html(cleanedContent);
                        $('#chatContent').val(cleanedContent)

                        // Generate title and description based on the cleaned content
                        generateName(cleanedContent, chatId);
                        generateDescription(cleanedContent, chatId);

                        $('#chatInput .load').toggleClass('d-none')
                        $('#sendMessage').toggleClass('d-none')

                        createEditor(JSON.parse(cleanedContent))
                        $('#chatForm').toggleClass('d-none')
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        function generateDescription(cleanedContent, chatId) {

            const apiUrl = '/api/openai-chat-creation';
            // Clear the chatContent area only if it's not empty
            if ($('#chatDescription').val().trim() !== '') {
                $('#chatDescription').val('');
            }        

            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message: cleanedContent, system : getSystem('chatDescription') }),
                success: function(response) {

                    $('#chatDescription').html('')
                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                        // Update the bot response container with the new content
                        $('#chatDescription').val($('#chatDescription').val() + data.content);

                    };

                    eventSource.onerror = function(error) {
                        console.log('EventSource failed.');
                        eventSource.close();
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        function generateName(cleanedContent, chatId) {

            const apiUrl = '/api/openai-chat-creation';
            
            $('#chatName').val('')
            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message: cleanedContent, system : getSystem('chatName') }),
                success: function(response) {

                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                        // Update the bot response container with the new content
                        $('#chatName').val(markdownContent);

                    };

                    eventSource.onerror = function(error) {
                        console.log('EventSource failed.');
                        eventSource.close();
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        function cleanJsonString(jsonString) {
            // Remove all characters before the first '{'
            let start = jsonString.indexOf('{');
            if (start !== -1) {
                jsonString = jsonString.substring(start);
            }

            // Remove all characters after the last '}'
            let end = jsonString.lastIndexOf('}');
            if (end !== -1) {
                jsonString = jsonString.substring(0, end + 1);
            }

            return jsonString;
        }
        function getSystem(systemType){
            var system;

            switch (systemType) {
                case 'chatDescription':
                    system = `
                        You are a JSON description generator. You take the JSON provided by the user and return a short description of 2 sentences in japanese.
                        You should respond in plain text with the description only.
                    `;
                    break;
                case 'chatName':
                    system = `
                        You are a JSON title generator. You take the JSON provided by the user and return a title in japanese.
                        You should respond in plain text with the title only.
                    `;
                    break;
                case "chatContent":
                    system = `
                    Your are a JSON generator. Use the user instruction to generate a JSON following the structure below. Your answer must be in japanese. \n\n
                        {
                            "story": {
                                "step1": {
                                    "introduction": "Your introduction text for step 1 here.",
                                    "choices": [
                                        {
                                            "choiceId": "uniqueId1",
                                            "choiceText": "Choice text 1",
                                            "result": "Result text for choice 1."
                                        },
                                        {
                                            "choiceId": "uniqueId2",
                                            "choiceText": "Choice text 2",
                                            "result": "Result text for choice 2."
                                        },
                                        {
                                            "choiceId": "uniqueId3",
                                            "choiceText": "Choice text 3",
                                            "result": "Result text for choice 3."
                                        }
                                    ],
                                    "conclusion": "Your conclusion text for step 1 here."
                                },
                                "step2": {
                                    "introduction": "Your introduction text for step 2 here.",
                                    "choices": [
                                        {
                                            "choiceId": "uniqueId4",
                                            "choiceText": "Choice text 4",
                                            "result": "Result text for choice 4."
                                        },
                                        {
                                            "choiceId": "uniqueId5",
                                            "choiceText": "Choice text 5",
                                            "result": "Result text for choice 5."
                                        },
                                        {
                                            "choiceId": "uniqueId6",
                                            "choiceText": "Choice text 6",
                                            "result": "Result text for choice 6."
                                        }
                                    ],
                                    "conclusion": "Your conclusion text for step 2 here."
                                }
                            }
                        }`;
                    break;
                default:
                    system = "Your are a useful assistant.";
                    break;
                    
            }
            return system
        }
        function createEditor(json) {
            console.log(json)
            $('#chatContentEdition').empty(); // Clear previous content
            let count = 0
            for (const step in json.story) {
                count ++
                const stepData = json.story[step];
                const stepDiv = $('<div></div>').addClass('step card mb-3 bg-light');
                const stepCardBody = $('<div></div>').addClass('card-body');
                
                stepCardBody.append(`<h5 class="card-title">ステップ${count}</h5>`);
                
                // Introduction
                stepCardBody.append(`<div class="mb-3"><label class="form-label">イントロダクション:</label><input type="text" class="form-control introduction" value="${stepData.introduction}" /></div>`);
                
                // Choices
                stepData.choices.forEach((choice, index) => {
                    const choiceDiv = $('<div></div>').addClass('choice mb-3');
                    choiceDiv.append(`<h6>選択 ${index + 1}</h6>`);
                    choiceDiv.append(`<div class="mb-2"><label class="form-label">選択テキスト:</label><input type="text" class="form-control choiceText" value="${choice.choiceText}" /></div>`);
                    choiceDiv.append(`<div class="mb-2"><label class="form-label">結果：</label><input type="text" class="form-control result" value="${choice.result}" /></div>`);
                    stepCardBody.append(choiceDiv);
                });
                
                // Conclusion
                stepCardBody.append(`<div class="mb-3"><label class="form-label">結論：</label><input type="text" class="form-control conclusion" value="${stepData.conclusion}" /></div>`);
                
                stepDiv.append(stepCardBody);
                $('#chatContentEdition').append(stepDiv);
            }
        }

        function saveJson() {
            const updatedJson = { story: {} };
            $('.step').each(function(index, stepDiv) {
                const stepKey = `step${index + 1}`;
                const stepData = {
                    introduction: $(stepDiv).find('.introduction').val(),
                    choices: [],
                    conclusion: $(stepDiv).find('.conclusion').val()
                };
                
                $(stepDiv).find('.choice').each(function(choiceIndex, choiceDiv) {
                    const choiceData = {
                        choiceText: $(choiceDiv).find('.choiceText').val(),
                        result: $(choiceDiv).find('.result').val()
                    };
                    stepData.choices.push(choiceData);
                });
                
                updatedJson.story[stepKey] = stepData;
            });
            
            console.log(JSON.stringify(updatedJson, null, 2));
            return JSON.stringify(updatedJson, null, 2);
        }

        $('#saveButton').click(function() {
            saveJson();
        });
        $('#displayProcess').click(function(){
            $('#displayProcessToggle').toggleClass('d-none')
        })
    });
</script>
</body>
</html>
