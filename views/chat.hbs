<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
    <link rel="icon" href="/img/logo.webp" type="image/webp">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="//code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <nav class="navbar navbar-light bg-transparent py-1 sticky-top d-none" style="border-bottom: 1px solid rgba(210, 184, 255, 0.2);">
    <div class="container-fluid justify-content-between">
        <a class="navbar-brand d-flex flex-row align-items-center bg-white px-5 py-2" href="/">
        <img src="/img/logo.webp" alt="" class="logo">
        <span class="brand-name ms-3">LAMIX</span>
        </a>
        <a href="#quizSection" class="btn btn-gradient-3d-orange">無料診断</a>
    </div>
    </nav>
    <div id="quizSection" class="m-0">
        <div id="chat-container" class="card mb-5 rounded-0" style="height: 100vh;" >
            <div class="d-flex justify-content-between card-header text-center bg-dark text-white rounded-0">
                <div>LAMIXチャット</div>
                <div class="d-flex align-items-center">
                    <div class="count me-2"></div><i class="fas fa-comment"></i>
                </div>
            </div>
            <div class="card-body text-center pb-5 shadow rounded-0" style="min-height:250px;overflow-y: auto;">
                <div id="chatContainer">
                    <div id="messages"></div>
                </div>
                <div id="chatInput" class="input-group position-absolute bg-white pb-5 px-3">
                    <input type="text" id="userMessage" class="form-control py-3" placeholder="メッセージを入力してください">
                    <button id="sendMessage" class="btn btn-dark px-4"><i class="fas fa-paper-plane"></i></button>
                </div>
            </div>
            <div class="card-footer text-muted text-center d-none">
                フッターコンテンツ
            </div>
        </div>
        <div id="lastchance"></div>
    </div>
<footer class="l-footer p-footer">
    <div class="c-section-inner">
      <div class="p-footer__logo">
        <a href="https://hatoltd.com/" target="_blank"><img src="/img/hato.png" alt=""></a>
      </div>
      <div class="p-footer-flex">
        <p class="p-footer__leftText">〒530-0001<br>
           大阪府大阪市北区梅田1丁目2番2号大阪駅前第2ビル12-12
        </p>
        <small class="p-footer__copyright" translate="no" lang="en">
          Copyright ©2024 HATO,LTD. All Rights Reserved.
        </small>
      </div>
    </div>
    <!-- /.c-section-inner -->
  </footer>
<script>
var userId
var userIp
$(document).ready(function() {
    // Fetch the user's IP address and generate a unique ID
    fetchUserIP(function(new_userId,userIp) {

        let chatId = "{{chatId}}";
        if (!chatId) {
            chatId = generateRandomChatId();
        }

        console.log('Chat ID:', chatId);

        sendCustomData({action: 'chat-page'});
        //sendMessage(`こんにちわ`,false)
        // Function to send a message
        function sendMessage(customMessage,displayStatus = true) {
            const message = customMessage || $('#userMessage').val();
            if (message.trim() !== '') {
                if(displayStatus){
                    displayMessage('user', message);
                }
                $('#userMessage').val(''); // Clear the input field
                
                // Send the message to the backend (to be implemented)
                $.ajax({
                    url: '/api/chat', // Backend endpoint to handle the message
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ message: message, userId:userId, chatId:chatId }),
                    success: function(response) {
                        const {userId, chatId } = response
                        generateCompletion(userId, chatId)
                    },
                    error: function(error) {
                        console.error('Error:', error);
                        displayMessage('bot', 'An error occurred while sending the message.');
                    }
                });
            }
        }

        // Function to display a message in the chat
        function displayMessage(sender, message) {
            const messageClass = sender === 'user' ? 'user-message' : 'bot-message';
            console.log({messageClass})
            if(messageClass == 'user-message'){
                $('#messages').append(`
                    <div class="d-flex flex-row justify-content-end mb-4 message-container ${messageClass}">
                        <div  class="p-3 me-3 border" style="border-radius: 15px; background-color: #fbfbfb;">
                            <span>${message}</span>
                        </div>
                    </div>
                `);
            }
            $('#messages').scrollTop($('#messages')[0].scrollHeight); // Scroll to the bottom
        }

        // Event handler for the send button
        $('#sendMessage').on('click', function() {
            sendMessage();
        });

        // Event handler for the Enter key
        $('#userMessage').on('keypress', function(event) {
            if (event.which == 13) { // Enter key is pressed
                sendMessage();
            }
        });

        function generateCompletion(userId, chatId) {
            const apiUrl = '/api/openai-chat';

            // Initialize the bot response container
            const botResponseContainer = $(`
                    <div class="d-flex flex-row justify-content-start mb-4 message-container bot-message" >
                        <img src="/img/logo.webp" alt="avatar 1" style="min-width: 25px; width: 25px; height: 100%; border-radius: 15%;">
                        <div class="p-3 ms-3 text-start" style="border-radius: 15px; background: linear-gradient(90.9deg, rgba(247, 243, 255, 0.5) 2.74%, #B894F9 102.92%);">
                            <span></span>
                        </div>
                    </div>`);
            $('#messages').append(botResponseContainer);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);

            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ userId, chatId }),
                success: function(response) {
                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                        // Update the bot response container with the new content
                        botResponseContainer.find('span').html(marked.parse(markdownContent));
                        $('#messages').scrollTop($('#messages')[0].scrollHeight); // Scroll to the bottom
                    };

                    eventSource.onerror = function(error) {
                        console.log('EventSource failed.');
                        eventSource.close();
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        
        function sendCustomData(customData){
            $.ajax({
                url: '/api/custom-data',
                type: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify({ userId: userId, customData: customData }),
                success: function(response) {
                    
                },
                error: function(error) {
                    console.log(error.statusText);
                }
            });
        }
    });
    // Function to hash the IP address to generate a unique ID
    function hashIP(ip) {
        let hash = 0, i, chr;
        if (ip.length === 0) return hash;
        for (i = 0; i < ip.length; i++) {
            chr = ip.charCodeAt(i);
            hash = ((hash << 5) - hash) + chr;
            hash |= 0; // Convert to 32bit integer
        }
        return hash;
    }

    // Function to fetch the user's IP address using an API
    function fetchUserIP(callback) {
        $.getJSON('https://api.ipify.org?format=json', function(data) {
            userIp = data.ip;
            userId = hashIP(userIp); 
            if (callback) {
                callback(userId,userIp); // Call the callback function with userID
            }
        });
    } 

    function generateRandomChatId() {
        return 'chat_' + Math.random().toString(36).substr(2, 9);
    }

});

</script>
</body>
</html>
