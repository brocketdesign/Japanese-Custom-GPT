<!DOCTYPE html>
<html lang="ja">
   {{> dashboard-header}}
<body>
    {{> dashboard-nav}}

    <style>
    #chatPurpose {
        background-color: #cccccc4d;
        border: 2px solid;
    }
    #chatImage{
        width: 100px;
        height: 100px; 
        object-fit:cover;
        object-position:top;
    }
    #chatImage.on{
        width: auto !important;
        height: 270px !important;
    }
    .btn-gradient-radius {
        display: inline-block;
        padding: 7px 20px;
        border-radius: 25px;
        text-decoration: none;
        color: #FFF;
        background-image: linear-gradient(45deg, #FFC107 0%, #ff8b5f 100%);
        transition: .4s;
        font-size: 21px;
    }
    label{
        font-size: 14px;
        color: #aaaaaa;
    }
    #sendMessage,
    #chatInput .load {
        border-left: 0 !important;
        border-radius: 0px 30px 30px 0px !important;
        box-shadow: none;
    }
    #userMessage {
        border-radius: 30px 0px 0px 30px !important;
        background-color: #f8f9fa;
    }
    #userMessage:focus {
        outline: none;
        box-shadow: none; /* If there is a box shadow applied on focus */
    }
    .button-group{
        top:0;
        right: 15px;
    }
    .scroll-container {
      display: flex;
      flex-wrap: nowrap;
      overflow-x: auto;
    }
    .scroll-container > * {
      flex: 0 0 auto;
      width: auto;
    }
    .card-text.template{
        font-size: 12px;
    }
    /*Custom css*/
    label{
        font-size: 12px;
        color: #8d8b8b;
    }
    .avatar-xl img {
        width: 110px;
    }
    .rounded-circle {
        border-radius: 50%;
    }
    .rounded-circle.on {
        border-radius: 15px !important;
    }
    img {
        vertical-align: middle;
        border-style: none;
    }
    .text-muted {
        color: #aeb0b4 !important;
    }
    .text-muted {
        font-weight: 300;
    }
    .form-control {
        display: block;
        width: 100%;
        height: calc(1.5em + 0.75rem + 2px);
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
        font-weight: 400;
        line-height: 1.5;
        color: #4d5154;
        background-color: #ffffff;
        background-clip: padding-box;
        border: 1px solid #eef0f3;
        border-radius: 0.25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    #markdownContainer {
        margin: 20px;
        padding: 20px;
        border: 1px solid #eef0f3;
        border-radius: 4px;
    }
    #chatRule {
        display: none;
    }
    </style>
<div class="container my-4">
    <h2 class="d-none">{{#if chatId}}チャットを編集{{else}}新しいチャットを追加{{/if}}</h2>
    <div id="imageSection" class="text-center mb-4" ><div class="mx-auto p-auto text-center d-flex align-items-center justify-content-center position-relative">
        <img id="chatImage" src="/img/logo.webp" alt="chat Thumbnail" class="rounded-circle" style="cursor: pointer;">
        <i class="fas fa-edit position-absolute" style="bottom: 5px; font-size: 1em; color: white; background-color: rgba(0, 0, 0, 0.5); border-radius: 50%; padding: 5px;cursor: pointer;"></i>
    </div>

    </div>  
    <div>
        <p class="text-small text-muted text-center" style="font-size:12px">
            AIキャラクター作成ページでは、以下の項目をカスタマイズすることで、ユーザーが望む最適なAIキャラクターを作成できます。<br>
            また、AIを使用して新しいキャラクターを生成することも可能です。<br>
        </p>
    </div>
    <button type="button" id="displayProcess" class="badge btn-ligh text-muted border mb-2 mx-3 d-none" style="font-size: 12px;border-radius:40px">プロセスを表示する</button>
    <div id="displayProcessToggle" class="mb-3 mx-3 d-none">
        <label for="chatContent" class="form-label d-none">チャットコンテンツ (JSON形式)</label>
        <textarea class="form-control" id="chatContent" name="content" rows="10" required></textarea>
    </div>
    
    <form id="chatForm" class="mb-5 pb-5 mx-3">
        <div class="mb-3 mx-3">
            <button type="button" id="genChat" class="btn btn-dark btn-gradient-radius my-3 shadow-0 w-100" data-toggle="tooltip" title="チャット構造の生成">
                AIでキャラクターを生成する
                <i class="fa fa-spinner fa-spin fa-fw fa-hidden d-none me-2"></i>
                <div class="spinner-border spinner-border-sm text-white" role="status" style="display: none;">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </button>
        </div>
        <div class="mb-3 mx-3 row">
            <div class="col-auto">
                <label for="visibility" class="form-label"><i class="fas fa-eye"></i> 公開設定を選択してください:</label>
                <select class="form-select w-auto" id="visibility" name="visibility">
                    <option value="private" selected><i class="fas fa-lock"></i> 非公開</option>
                    <option value="public"><i class="fas fa-globe"></i> 公開</option>
                </select>
            </div>
            <div class="col-auto">
                <label for="language" class="form-label"><i class="fas fa-language"></i> 言語を選択してください:</label>
                <select class="form-select w-auto" id="language" name="language">
                    <option value="japanese" selected><i class="fas fa-flag"></i> 日本語</option>
                    <option value="english"><i class="fas fa-flag"></i> 英語</option>
                </select>
            </div>
        </div>
        <div class="mb-3 mx-3">
            <label for="chatPurpose" class="form-label">キャラクターの詳細</label>
            <textarea class="form-control" id="chatPurpose" name="content" rows="5" 
            placeholder="例：中村美咲（27歳）は明るく社交的なOLで、責任感が強く、チームをサポートする姿勢が評価されている。趣味は旅行とカフェ巡りで、休日には友達と過ごすことが多い。話し方は礼儀正しく丁寧でありながら柔らかく、安心感を与える。"></textarea>
        </div>
        <div class="mb-3 mx-3" id="thumbnailInputContainer" style="display: none;">
            <label for="chatThumbnail" class="form-label">チャットのサムネイルをアップロード</label>
            <input type="file" class="form-control" id="chatThumbnail" name="thumbnail" accept="image/*">
        </div>
        <div class="mb-3 mx-3" style="display: none;">
            <label for="chatName" class="form-label">名前</label>
            <input type="text" class="form-control" id="chatName" name="name" required>
        </div>
        <div class="mb-3 mx-3 d-none">
            <label for="myUrl" class="form-label">URL</label>
            <div class="input-group ">
                <input type="url" class="form-control" id="myUrl" name="url" placeholder="URLを入力してください">
                <button class="btn btn-outline-secondary" type="button" id="urlButton">
                    <i class="fas fa-search"></i>
                </button>
                <div class="load bg-light px-4 d-flex justify-content-center align-items-center border d-none url-load">
                    <div class="spinner-grow spinner-grow-sm text-dark" role="status"><span class="visually-hidden">Loading...</span></div>
                </div>
            </div>
        </div>
        <div class="mb-3 mx-3 d-none">
            <label for="chatImageUrl" class="form-label">chatImage</label>
            <input type="text" class="form-control" id="chatImageUrl" name="chatImageUrl" placeholder="URLを入力してください" value="" hidden>
        </div>
        <div class="mb-3 mx-3 d-none">
            <label for="chatPdf" class="form-label">PDFファイルを選択</label>
            <input type="file" id="chatPdf" class="form-control" accept="pdf" lang="ja" title="PDFファイルを選択">
        </div>
        <div id="resultContainer" class="mt-3 mx-3" style="display: none;">
            <h4>URLの概要</h4>
            <p id="resultText"></p>
        </div>
        <div class="mb-3 mx-3" style="display: none;">
            <label for="chatCategory" class="form-label">カテゴリー</label>
            <input type="text" class="form-control" id="chatCategory" name="name" required>
        </div>
        <div class="mb-3 mx-3"  style="display: none;">
            <label for="chatDescription" class="form-label">説明</label>
            <textarea class="form-control" id="chatDescription" name="content" rows="5" placeholder="" ifplaceholder="チャットボットの詳細な説明をここに記入してください。どのような機能を持たせたいのか、どのようなユーザーに向けたものなのか、具体的なシナリオや対話の流れなど、できるだけ詳しく記載してください。ユーザーがどのようにチャットボットとやり取りするかの例も含めてください。" required></textarea>
        </div>
        <div class="mb-3 mx-3">
            <label for="chatUrl" class="form-label d-none">URL</label>
            <input type="hidden" class="form-control" id="chatUrl" name="url">
        </div>
        <div class="mb-3 mx-3" style="display: none;">
            <label for="chatRule" class="form-label" >指示</label>
            <textarea class="form-control" id="chatRule" name="content" rows="5" placeholder="チャットボットの動作についての指示をここに記入してください。ユーザーに対する返答のトーン、応答のスタイル、特定の状況に対する反応、使用する言葉遣いなど、チャットボットがどのように振る舞うべきかをできるだけ詳しく記載してください。"></textarea>
        </div>
        <div id="markdownContainer" contenteditable="true" style="display: none;"></div>
        <div class="container mt-1 d-none">
            <label for="chatContentEdition" class="form-label">チャットの構造</label>
            <div id="chatContentEdition"></div>
            <button type="button" id="genStructure" class="btn w-100 btn-outline-secondary mb-3 shadow-0" data-toggle="tooltip" title="チャット構造の生成">
                <i class="fa fa-cog fa-fw me-2"></i>
                <i class="fa fa-spinner fa-spin fa-fw fa-hidden d-none"></i>
                チャット構造を生成する
            </button>
            <p class="text-small text-muted text-start" style="font-size:12px">
                キャラクタープロファイルを提供することで、ユーザーは「チャット構造の生成」をクリックして、新しい会話を開始する際に常に使用されるチャットトラムを生成できます。トラムが提供されていない場合は、キャラクターの説明を使用してチャットが開始されます。
            </p>
            <button type="button" id="addQuestionBtn" class="btn btn-light float-end" data-toggle="tooltip" title="追加" data-original-title="Share"><i class="fas fa-plus"></i> </button>
            <button type="button" id="saveButton" class="btn btn-primary mt-3 d-none">Save</button>
        </div>
        <div class="sticky-bottom">
            <button type="submit" id="sendForm" class="btn btn-primary btn-large w-100 mt-5 mb-3" style="border-radius:50px;display:none;">
                    <i class="fas fa-robot me-2"></i>
                    <i class="fa fa-spinner fa-spin fa-fw fa-hidden d-none me-2"></i>
                    保存して試す
            </button>
        </div>
        <p class="text-small text-muted text-start sendForm-text" style="font-size:12px;display:none;">
            「保存して試す」をクリックすると、AIキャラクターを保存して試すことができます。後でさらに修正を加えることも可能です。
        </p>
    </form>
    
</div>
 {{> dashboard-footer}}
<script>
    $(document).ready(function() {
        $('.dropdown-toggle').each(function(e) {
            new mdb.Dropdown($(this)[0]);
        });
        var count = 0
        let chatId = '{{chatId}}';
        const isTemporaryChat = '{{isTemporaryChat}}'

        if (chatId || !isTemporaryChat) {
            fetchchatData(chatId);
        }
        
        var savedURL = localStorage.getItem('savedURL');
        if (savedURL) {
            $('#myUrl').val(savedURL);
            localStorage.removeItem('savedURL');
        }

        $('textarea').each(function() {
            resizeTextarea(this);
            $(this).on('input change', function() {
                resizeTextarea(this);
            });
        });

        function resizeTextarea(element){
            if($(element).val().trim()!=''){
                element.style.height = 'auto';
                element.style.height = (element.scrollHeight) + 'px';  
            }else{
                element.style.height = 'auto'; 
            }
        }

        $('#myUrl').on('input change',function(){
             $('#chatUrl').val($(this).val());
        });
        function fetchUrlSummary(url) {
            $.ajax({
                url: '/api/urlsummary',
                type: 'GET',
                data: { url: url },
                success: function(response) {
                    $('#resultText').html(marked.parse(response.analysis));
                    $('#resultContainer').show();
                    $('.url-load').addClass('d-none');
                    $('#urlButton').removeClass('d-none');
                },
                error: function(xhr, status, error) {
                    $('#resultText').text('Error: ' + xhr.responseText);
                    $('#resultContainer').show();
                    $('.url-load').addClass('d-none');
                    $('#urlButton').removeClass('d-none');
                }
            });
        }

        $('#urlButton').on('click', function() {
            const url = $('#myUrl').val();
            $('#chatUrl').val(url);
            $('.url-load').removeClass('d-none');
            $('#urlButton').addClass('d-none');
            fetchUrlSummary(url);
        });

        $('#chatImage').parent().click(function() {
            $('#chatThumbnail').click();
        });

        $('#chatThumbnail').change(function(event) {
            const reader = new FileReader();
            reader.onload = function(e) {
                $('#chatImage').attr('src', e.target.result).show().addClass('on');
            }
            reader.readAsDataURL(event.target.files[0]);
        });

        function fetchchatData(chatId) {
            $.ajax({
                url: `/api/chat-data/${chatId}`,
                type: 'GET',
                dataType: 'json',
                success: function(chatData) {
                    if(chatData.purpose){
                        $('#chatPurpose').val(chatData.purpose)
                    }
                    if(chatData.name){
                        $('#chatName').val(chatData.name);
                        $('#chatName').parent().show()
                    }
                    if(chatData.visibility){
                        $('#visibility').val(chatData.visibility)
                    }
                    if(chatData.language){
                        $('#language').val(chatData.language)
                    }
                    if(chatData.category){
                        $('#chatCategory').val(chatData.category);
                        $('#chatCategory').parent().show()
                    }
                    
                    var chatDescriptionTextare = $('#chatDescription')
                    if(chatData.description){
                        chatDescriptionTextare.val(chatData.description);
                        setTimeout(function(){
                            resizeTextarea(chatDescriptionTextare[0]);
                        },500)
                        chatDescriptionTextare.parent().show()
                    }
                    
                    var chatRuleTextarea = $('#chatRule');
                    if(chatData.rule){
                        chatRuleTextarea.val(chatData.rule);
                        $('#markdownContainer').html(chatData.rule)
                        setTimeout(function(){
                            resizeTextarea(chatRuleTextarea[0]);
                        },500)
                        chatRuleTextarea.parent().show();
                        $('#markdownContainer').show();

                        $('#sendForm').show()
                        $('.sendForm-text').show()
                    }
                    
                    $('#chatUrl').val(chatData.url);
                    $('#myUrl').val(chatData.url);
                    if(chatData.url){
                        fetchUrlSummary(chatData.url);
                    }            
                    if(chatData.content){
                        $('#chatContent').val(JSON.stringify(chatData.content, null, 2));
                        createEditor(chatData.content)
                    }

                    if (chatData.thumbnailUrl && chatData.thumbnailUrl != undefined) {
                        $('#chatImageUrl').val(chatData.thumbnailUrl);
                        console.log({thumb:chatData.thumbnailUrl})
                        $('#chatImage').attr('src', chatData.thumbnailUrl).show().addClass('on');
                    }
                    if (chatData.chatImageUrl && chatData.chatImageUrl != undefined) {
                        $('#chatImageUrl').val(chatData.chatImageUrl);
                        console.log({chatImageUrl:chatData.chatImageUrl})
                        $('#chatImage').attr('src', chatData.chatImageUrl).show().addClass('on');
                    }
                        $('#chatForm').removeClass('d-none')
                        //$('#genStructure').removeClass('btn-outline-secondary').addClass('btn-secondary')
                },
                error: function(xhr, status, error) {
                   console.log(`New tempry chat`)
                }
            });
        }

        $('#chatForm').on('submit', function(e) {
            e.preventDefault();
            $('#sendForm .fa-spinner').toggleClass('d-none')

            const formData = new FormData();
            const name = $('#chatName').val();
            const purpose = $('#chatPurpose').val()
            const language = $('#language').val()
            const category = $('#chatCategory').val();
            const description = $('#chatDescription').val();
            const rule = $('#chatRule').val();
            const url = $('#chatUrl').val();
            const pdf = $('#chatPdf')[0].files[0];
            const content = saveJson();
            const thumbnail = $('#chatThumbnail')[0].files[0];
            const chatImageUrl = $('#chatImageUrl').val()
            const visibility = $('#visibility').val()

            formData.append('name', name);
            formData.append('purpose',purpose)
            formData.append('language',language)
            formData.append('chatImageUrl',chatImageUrl)
            formData.append('category', category);
            formData.append('description', description);
            formData.append('content', content);
            formData.append('rule', rule);
            formData.append('url', url);
            formData.append('visibility', visibility);
            
            if(thumbnail){
                formData.append('thumbnail', thumbnail);
            }
            if(pdf){
                formData.append('pdf',pdf)
            }
            if(chatId){
                formData.append('chatId', chatId)
            }
            $.ajax({
                url: '/api/add-chat',
                type: 'POST',
                processData: false,
                contentType: false,
                data: formData,
                success: function(response) {
                    $('#sendForm .fa-spinner').toggleClass('d-none')
                    const {chatId}=response
                    window.location = '/chat/'+chatId
                },
                error: function(error) {
                    Swal.fire(
                        'エラー!',
                        'チャットの追加に失敗しました: ' + error.responseJSON.error,
                        'error'
                    );
                }
            });
        });

   
        // Event handler for the send button
        $('#genChat').on('click', function() {
            $('#genChat .spinner-border ').show()
            if($('#chatImageUrl').val().trim().length > 0 && $('#chatPurpose').val().trim() == ''){
                generateImageDescription(function() {
                    generateName(function(){
                        generateDescription();
                        generateRule(function(){
                            $('#sendForm').show()
                            $('.sendForm-text').show()
                            $('#genChat .spinner-border ').hide()
                        });
                    });
                    generateCategory();
                    $('#genStructure').removeClass('btn-outline-secondary').addClass('btn-secondary')
                });
                return
            }
            if ($('#chatPurpose').val().trim() == '') {
                Swal.fire({
                    title: '警告',
                    text: 'キャラクターの詳細は必須項目です。入力してください。',
                    icon: 'warning',
                    confirmButtonText: 'OK'
                });
                return;
            }
            generateName(function(){
                generateDescription();
                generateRule(function(){
                    $('#sendForm').show()
                    $('.sendForm-text').show()
                    $('#genChat .spinner-border ').hide()
                });
            });
            generateCategory();
            $('#genStructure').removeClass('btn-outline-secondary').addClass('btn-secondary')
        });

        $('#genStructure').click(function(){
            generateCompletion()
        })
        
        const urlParams = new URLSearchParams(window.location.search);
        const chatCategory= urlParams.get('chatCategory');
        if (chatCategory) {
            $('#chatCategory').val(chatCategory);
        }
        const userMessage = urlParams.get('userMessage');
        if (userMessage) {
            $('#chatPurpose').val(userMessage);
        }
        const chatImageUrl = urlParams.get('chatImage');
        if (chatImageUrl) {
            setTimeout(function(){
                $('#chatImageUrl').val(chatImageUrl).change();
            },500)
            $('#chatImage').attr('src', chatImageUrl).show().addClass('on');
        }
        function generateCompletion(callback) {

            const apiUrl = '/api/openai-chat-creation';

            let message = $('#chatPurpose').val().trim();
            let language =$('#language').val()
            message = message + 'YOU MUST respond in '+language
            const urlSummary = $(`#resultText`).text()
            const myUrl = $('#myUrl').val()

            if(urlSummary.trim() != ''){
                message = `URL : ${myUrl} \n Content Summary : ${urlSummary}. \n\n Considering the above informations, ${message}`
            }
            
            // Clear the chatContent area only if it's not empty
            if ($('#chatContent').val().trim() !== '') {
                $('#chatContent').val('');
            }       
            if(message.length == 0){
                return
            } 
            $('#genStructure .fa-spinner').toggleClass('d-none')

            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message : getSystem('chatContent'), system : message }),
                success: function(response) {

                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                        // Update the bot response container with the new content
                        $('#chatContent').val($('#chatContent').val() + data.content);

                    };

                    eventSource.onerror = function(error) {
                        eventSource.close();

                        // Clean the JSON string when the stream ends
                        let cleanedContent = cleanJsonArray(markdownContent);
                        $('#chatContent').html(cleanedContent);
                        $('#chatContent').val(cleanedContent)

                        $('#genStructure .fa-spinner').toggleClass('d-none')

                        createEditor(JSON.parse(cleanedContent))
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        function generateRule(callback) {

            let message = $('#chatPurpose').val();
            let language =$('#language').val()
            const name = $('#chatName').val();
            message = message + 'The character name is : '+ name + '\n\n YOU MUST respond in '+ language
            const urlSummary = $(`#resultText`).text()
            const myUrl = $('#myUrl').val()

            if(urlSummary.trim() != ''){
                message = `URL : ${myUrl} \n Content Summary : ${urlSummary}. \n\n Considering the above informations, ${message}`
            }
            const apiUrl = '/api/openai-chat-creation';
            
            $('#chatRule').val('')
            $('#markdownContainer').html('');
            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message, system : getSystem('chatRule') }),
                success: function(response) {
                    $('#chatRule').parent().show()
                    $('#markdownContainer').show()

                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;
                        var htmlContent = marked.parse(markdownContent);
                        // Set the HTML content to the container
                        $('#markdownContainer').html(htmlContent);
                        // Store the HTML content in the hidden textarea
                        $('#chatRule').val(htmlContent);
                    };

                    eventSource.onerror = function(error) {
                        eventSource.close();
                        resizeTextarea($('#chatRule')[0])
                        if(callback){callback()}
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        function generateQuestion(cleanedContent, chatId, callback) {

            const apiUrl = '/api/openai-chat-creation';

            const description = $('#chatDescription').val()
            const category = $('#chatCategory').val()
            const name = $('#chatName').val()
            const message = `Name : ${name} \n Category: ${category} \n Description: ${description} \n JSON : ${cleanedContent}`
            let language =$('#language').val()
            message = message + 'YOU MUST respond in '+language

            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message, system : getSystem('chatQuestion') }),
                success: function(response) {

                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                    };

                    eventSource.onerror = function(error) {
                        eventSource.close();
                        if(callback){callback(markdownContent)}
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        function generateDescription() {

            let message = $('#chatPurpose').val();
            let language =$('#language').val();
            const name = $('#chatName').val();
            message = message + 'The character name is : '+ name + '\n\n YOU MUST respond in '+ language
            const urlSummary = $(`#resultText`).text()
            const myUrl = $('#myUrl').val()
            if(urlSummary.trim() != ''){
                message = `URL : ${myUrl} \n Content Summary : ${urlSummary}. \n\n Considering the above informations, ${message}`
            }
            const apiUrl = '/api/openai-chat-creation';
            // Clear the chatContent area only if it's not empty
            if ($('#chatDescription').val().trim() !== '') {
                $('#chatDescription').val('');
            }        
            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message, system : getSystem('chatDescription') }),
                success: function(response) {

                    $('#chatDescription').html('')
                    $('#chatDescription').parent().show()
                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                        // Update the bot response container with the new content
                        $('#chatDescription').val($('#chatDescription').val() + data.content);

                    };

                    eventSource.onerror = function(error) {
                        eventSource.close();
                        resizeTextarea($('#chatDescription')[0])
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        function generateCategory() {

            let message = $('#chatPurpose').val();
            let language =$('#language').val()
            message = message + 'YOU MUST respond in '+language
            const urlSummary = $(`#resultText`).text()
            const myUrl = $('#myUrl').val()

            if(urlSummary.trim() != ''){
                message = `URL : ${myUrl} \n Content Summary : ${urlSummary}. \n\n Considering the above informations, ${message}`
            }

            const apiUrl = '/api/openai-chat-creation';
            
            $('#chatCategory').val('')
            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message, system : getSystem('chatCategory') }),
                success: function(response) {

                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";
                    $('#chatCategory').parent().show()

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                        // Update the bot response container with the new content
                        $('#chatCategory').val(markdownContent);

                    };

                    eventSource.onerror = function(error) {
                        eventSource.close();
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }

        function generateImageDescription(callback) {
            const imageUrl = $('#chatImageUrl').val();
            const language = $('#language').val();

            // Convert the image URL to a Base64 string
            convertImageUrlToBase64(imageUrl, function(base64Image) {
                if (!base64Image) {
                    console.log('Failed to convert image to Base64.');
                    return;
                }

                // Create system and message payloads
                const system = createSystemPayload(language);
                const message = createMessagePayload(base64Image);

                // API endpoint for generating image description
                const apiUrl = '/api/openai-chat-creation';

                // Clear previous description
                $('#chatPurpose').val('');

                // Send a POST request to the API
                sendPostRequest(apiUrl, { message, system }, function(sessionId) {
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    listenToEventSource(streamUrl, callback);
                });
            });
        }

        // Helper function to create the system payload
        function createSystemPayload(language) {
            return [
                {
                    "type": "text",
                    "text": 
                    `You are a useful assistant. 
                    You generate a creative character description and setting for the image I will provide. 
                    Here is an example : 例：中村美咲（27歳）は明るく社交的なOLで、責任感が強く、チームをサポートする姿勢が評価されている。趣味は旅行とカフェ巡りで、休日には友達と過ごすことが多い。話し方は礼儀正しく丁寧でありながら柔らかく、安心感を与える。
                    YOU MUST respond in ${language}. 
                    Start by providing a name or nickname for the character`
                }
            ];
        }

        // Helper function to create the message payload
        function createMessagePayload(base64Image) {
            return [
                {
                    "type": "image_url",
                    "image_url": {
                        "url": `data:image/png;base64,${base64Image}`
                    }
                }
            ];
        }

        // Helper function to send a POST request
        function sendPostRequest(apiUrl, data, successCallback) {
            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function(response) {
                    const sessionId = response.sessionId;
                    successCallback(sessionId);
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }

        // Helper function to listen to the EventSource
        function listenToEventSource(streamUrl, callback) {
            const eventSource = new EventSource(streamUrl);
            let markdownContent = "";

            eventSource.onmessage = function(event) {
                const data = JSON.parse(event.data);
                markdownContent += data.content;

                // Update the chat purpose input with the new content
                $('#chatPurpose').val(markdownContent);
            };

            eventSource.onerror = function(error) {
                eventSource.close();
                if (callback) { callback(); }
            };
        }

        // Function to convert image URL to Base64 (as explained earlier)
        function convertImageUrlToBase64(url, callback) {
            fetch(url)
                .then(response => response.blob())
                .then(blob => {
                    const reader = new FileReader();
                    reader.onloadend = function() {
                        callback(reader.result.split(',')[1]); // Extract Base64 string from Data URL
                    }
                    reader.readAsDataURL(blob);
                })
                .catch(error => {
                    console.error('Error:', error);
                    callback(null);
                });
        }


        function generateName(callback) {

            let message = $('#chatPurpose').val();
            let language =$('#language').val()
            message = message + 'YOU MUST respond in '+ language
            const urlSummary = $(`#resultText`).text()
            const myUrl = $('#myUrl').val()

            if(urlSummary.trim() != ''){
                message = `URL : ${myUrl} \n Content Summary : ${urlSummary}. \n\n Considering the above informations, ${message}`
            }

            const apiUrl = '/api/openai-chat-creation';
            
            $('#chatName').val('')
            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message, system : getSystem('chatName') }),
                success: function(response) {

                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    $('#chatName').parent().show()
                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                        // Update the bot response container with the new content
                        $('#chatName').val(markdownContent);

                    };

                    eventSource.onerror = function(error) {
                        eventSource.close();
                        if(callback){callback()}
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        function cleanJsonString(jsonString) {
            // Remove all characters before the first '{'
            let start = jsonString.indexOf('{');
            if (start !== -1) {
                jsonString = jsonString.substring(start);
            }

            // Remove all characters after the last '}'
            let end = jsonString.lastIndexOf('}');
            if (end !== -1) {
                jsonString = jsonString.substring(0, end + 1);
            }

            return jsonString;
        }
        function cleanJsonArray(jsonString) {
            // Remove all characters before the first '{'
            let start = jsonString.indexOf('[');
            if (start !== -1) {
                jsonString = jsonString.substring(start);
            }

            // Remove all characters after the last '}'
            let end = jsonString.lastIndexOf(']');
            if (end !== -1) {
                jsonString = jsonString.substring(0, end + 1);
            }

            return jsonString;
        }
        function getSystem(systemType){
            var system;

            switch (systemType) {
                case 'chatRule':
                    system = `
                        You are an AI character tone generator. \n
                        Use the provided details of the AI character.
                        Explain how to character speak, tone, emotional state.
                    `;
                    break;
                case 'chatQuestion':
                    system = `
                        You are a JSON generator. 
                        You take the information and the JSON provided by the user and return a new question on the same subject.\n
                        Be creative to provide interesting questions.\n
                        You respond MUST MATCH THE JSON BELOW.\n\n
                        {
                            "question": "string",
                            "responses": [
                            "string",
                            "string",
                            "string"
                            ]
                        }
                    `;
                    break;
                case 'chatDescription':
                    system = `
                        You are a conversation description generator. 
                        You take the provided content by the user and return a short description of 4 sentences.
                        You should respond in plain text with the description ONLY.NO COMMENTS.
                    `;
                    break;
                case 'chatName':
                    system = `
                        You take the provided content by the user and return the last name and firts name of the character.
                        If no name is provided, create a new realistic name that fit the character description.
                        You should respond in plain text with the name ONLY.NO COMMENTS.
                    `;
                    break;
                case 'chatCategory':
                    system = `
                        You are a JSON category generator. You take the provided content by the user and return a category.
                        You should respond in plain text with the category ONLY. NO COMMENTS.
                    `;
                    break;
                case "chatContent":
                    system = `
                    Provide conversation starters. It must sound like we are chatting, stay in your role.\n
                    responses is used help me respond to you. If I should instead write something, keep responses empty.\n
                    You respond MUST MATCH THE JSON BELOW.\n\n
                    [
                        {
                            "question": "string",
                            "responses": [
                            "string",
                            "string",
                            "string"
                            ]
                        },
                        {
                            "question": "string",
                            "responses": [
                            "string",
                            "string",
                            "string"
                            ]
                        }
                    ]
                    `;
                    break;
                default:
                    system = "Your are a useful assistant.";
                    break;
                    
            }
            return system
        }
        function createEditor(json) {
            $('#chatContentEdition').empty(); // Clear previous content
            json.forEach((qa, index) => {
                const qaDiv = $('<div></div>').addClass('qa card mb-3 bg-light');
                const qaCardBody = $('<div></div>').addClass('card-body');

                // Question
                qaCardBody.append(`<h5 class="card-title">質問 ${index + 1}</h5>`);
                qaCardBody.append(`<div class="mb-3"><label class="form-label">質問:</label><input type="text" class="form-control question" value="${qa.question}" /></div>`);

                // Responses
                qa.responses.forEach((response, responseIndex) => {
                    const responseDiv = $('<div class="ps-5"></div>').addClass('response mb-3');
                    responseDiv.append(`<h6>回答 ${responseIndex + 1}</h6>`);
                    responseDiv.append(`<div class="mb-2"><label class="form-label">回答テキスト:</label><input type="text" class="form-control responseText" value="${response}" /></div>`);
                    qaCardBody.append(responseDiv);
                });

                // Add Regenerate and Delete buttons
                const buttonGroup = $('<div class="position-absolute"></div>').addClass('button-group mt-3');

                const regenerateButton = $(`<button type="button" data-toggle="tooltip" title="再生成" data-original-title="Regenerate"></button>`).addClass('btn btn-outline-warning me-2 gen-question').html('<i class="fas fa-sync"></i>').click(() => {
                    Swal.fire({
                        title: '再生成',
                        text: `質問 ${index + 1} を再生成しますか？`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'はい',
                        cancelButtonText: 'いいえ'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            const questionIndex = index + 1
                            const cleanedContent = saveJson();
                            generateQuestion(cleanedContent, chatId, function(response){
                                const cleanResponse = JSON.parse(response)
                                updateQuestion(cleanResponse, index)
                                saveJson();
                                Swal.fire(
                                    '再生成しました!',
                                    `質問 ${index + 1} が再生成されました。`,
                                    'success'
                                );
                            })
                        }
                    });
                });

                const deleteButton = $('<button type="button" data-toggle="tooltip" title="削除" data-original-title="Delete"></button>').addClass('btn btn-outline-danger').html('<i class="fas fa-trash"></i>').click(() => {
                    Swal.fire({
                        title: '削除',
                        text: `質問 ${index + 1} を削除しますか？`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'はい',
                        cancelButtonText: 'いいえ'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            qaDiv.remove();
                            const cleanJSON = saveJson();
                            const parsedJson = JSON.parse(cleanJSON)
                            createEditor(parsedJson)
                        }
                    });
                });
                buttonGroup.append(regenerateButton, deleteButton);
                qaCardBody.append(buttonGroup);

                qaDiv.append(qaCardBody);
                $('#chatContentEdition').append(qaDiv);
            });
        }


        function addNewQuestion() {
            const newIndex = $('#chatContentEdition .qa').length + 1;
            if(newIndex>10){
                Swal.fire({
                    title: '警告',
                    text: '質問は最大10件までです。',
                    icon: 'warning',
                    confirmButtonText: '了解'
                });
                return
            }
            const newQaDiv = $('<div></div>').addClass('qa card mb-3 bg-light');
            const newQaCardBody = $('<div></div>').addClass('card-body');

            // New Question
            newQaCardBody.append(`<h5 class="card-title">質問 ${newIndex}</h5>`);
            newQaCardBody.append(`<div class="mb-3"><label class="form-label">質問:</label><input type="text" class="form-control question" value="" /></div>`);

            // Add empty response sections
            for (let i = 1; i <= 3; i++) {
                const newResponseDiv = $('<div class="ps-5"></div>').addClass('response mb-3');
                newResponseDiv.append(`<h6>回答 ${i}</h6>`);
                newResponseDiv.append(`<div class="mb-2"><label class="form-label">回答テキスト:</label><input type="text" class="form-control responseText" value="" /></div>`);
                newQaCardBody.append(newResponseDiv);
            }

            // Add Regenerate and Delete buttons
            const buttonGroup = $('<div class="position-absolute"></div>').addClass('button-group mt-3');

            const regenerateButton = $(`<button type="button" data-toggle="tooltip" title="再生成" data-original-title="Regenerate" data-index="${newIndex}"></button>`).addClass('btn btn-outline-warning me-2 gen-question').html('<i class="fas fa-sync"></i>').click(() => {
                Swal.fire({
                    title: '再生成',
                    text: `質問 ${newIndex} を再生成しますか？`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'はい',
                    cancelButtonText: 'いいえ'
                }).then((result) => {
                    if (result.isConfirmed) {
                        const cleanedContent = saveJson();
                        generateQuestion(cleanedContent, chatId, function(response){
                            const cleanResponse = JSON.parse(response)
                            updateQuestion(cleanResponse, newIndex-1)
                            saveJson();
                            // Handle regenerate logic here
                            Swal.fire(
                                '再生成しました!',
                                `質問 ${newIndex} が再生成されました。`,
                                'success'
                            );
                        })
                    }
                });
            });

            const deleteButton = $('<button type="button" data-toggle="tooltip" title="削除" data-original-title="Delete"></button>').addClass('btn btn-outline-danger').html('<i class="fas fa-trash"></i>').click(() => {
                Swal.fire({
                    title: '削除',
                    text: `質問 ${newIndex} を削除しますか？`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'はい',
                    cancelButtonText: 'いいえ'
                }).then((result) => {
                    if (result.isConfirmed) {
                        newQaDiv.remove();
                        const cleanJSON = saveJson();
                        const parsedJson = JSON.parse(cleanJSON)
                        createEditor(parsedJson)
                    }
                });
            });

            buttonGroup.append(regenerateButton, deleteButton);
            newQaCardBody.append(buttonGroup);

            newQaDiv.append(newQaCardBody);
            $('#chatContentEdition').append(newQaDiv);
        }

        $('#addQuestionBtn').on('click', addNewQuestion);
        
        function updateQuestion(obj, index) {
            // Find the corresponding question card based on the index
            const qaCard = $('#chatContentEdition .qa').eq(index);

            if (qaCard.length > 0) {
                // Update the question text
                const questionInput = qaCard.find('.question');
                questionInput.val(obj.question);

                // Update the responses
                const responseDivs = qaCard.find('.response');
                responseDivs.each((responseIndex, responseDiv) => {
                    const responseInput = $(responseDiv).find('.responseText');
                    if (obj.responses[responseIndex] !== undefined) {
                        responseInput.val(obj.responses[responseIndex]);
                    } else {
                        responseInput.val('');
                    }
                });

                // Handle additional responses if there are more in the object than in the current card
                if (obj.responses.length > responseDivs.length) {
                    const qaCardBody = qaCard.find('.card-body');
                    for (let i = responseDivs.length; i < obj.responses.length; i++) {
                        const newResponseDiv = $('<div class="ps-5"></div>').addClass('response mb-3');
                        newResponseDiv.append(`<h6>回答 ${i + 1}</h6>`);
                        newResponseDiv.append(`<div class="mb-2"><label class="form-label">回答テキスト:</label><input type="text" class="form-control responseText" value="${obj.responses[i]}" /></div>`);
                        qaCardBody.append(newResponseDiv);
                    }
                }
            } else {
                console.error(`No question found at index ${index}`);
            }
        }
        function saveJson() {
            const updatedJson = [];
            $('.qa').each(function(index, qaDiv) {
                const qaData = {
                    question: $(qaDiv).find('.question').val(),
                    responses: []
                };

                $(qaDiv).find('.response').each(function(responseIndex, responseDiv) {
                    const responseText = $(responseDiv).find('.responseText').val();
                    qaData.responses.push(responseText);
                });

                updatedJson.push(qaData);
            });

            //console.log(JSON.stringify(updatedJson, null, 2));
            $('#chatContent').val(JSON.stringify(updatedJson, null, 2));
            return JSON.stringify(updatedJson, null, 2);
        }

        $('#saveButton').click(function() {
            saveJson();
        });
        $('#displayProcess').click(function(){
            $('#displayProcessToggle').toggleClass('d-none')
        })
        // Function to update textarea value when container content changes
        function updateTextarea() {
            var containerHtml = $('#markdownContainer').html();
            $('#chatRule').val(containerHtml);
        }

        // Detect changes in the container content
        var observer = new MutationObserver(updateTextarea);
        observer.observe(document.getElementById('markdownContainer'), { childList: true, subtree: true });
    });
</script>
</body>
</html>
