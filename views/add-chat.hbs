<!DOCTYPE html>
<html lang="ja">
   {{> dashboard-header}}
<body>
    {{> dashboard-nav}}

    <style>
    label{
        font-size: 14px;
        color: #aaaaaa;
    }
    #sendMessage,
    #chatInput .load {
        border-left: 0 !important;
        border-radius: 0px 30px 30px 0px !important;
        box-shadow: none;
    }
    #userMessage {
        border-radius: 30px 0px 0px 30px !important;
        background-color: #f8f9fa;
    }
    #userMessage:focus {
        outline: none;
        box-shadow: none; /* If there is a box shadow applied on focus */
    }
    .button-group{
        top:0;
        right: 15px;
    }
    .scroll-container {
      display: flex;
      flex-wrap: nowrap;
      overflow-x: auto;
    }
    .scroll-container > * {
      flex: 0 0 auto;
      width: auto;
    }
    .card-text.template{
        font-size: 12px;
    }
    </style>
<div class="container my-4">
    <h2 class="d-none">{{#if chatId}}チャットを編集{{else}}新しいチャットを追加{{/if}}</h2>
    <div id="imageSection" class="text-center mb-4" ><div class="mx-auto p-auto text-center d-flex align-items-center justify-content-center position-relative">
        <img id="chatImage" src="/img/logo.webp" alt="chat Thumbnail" class="rounded-circle" style="width: 100px; height: 100px; object-fit: cover; cursor: pointer;">
        <i class="fas fa-edit position-absolute" style="bottom: 5px; font-size: 1em; color: white; background-color: rgba(0, 0, 0, 0.5); border-radius: 50%; padding: 5px;"></i>
    </div>

    </div>  
    <div>
        <p class="text-small text-muted text-center" style="font-size:12px">
            Lamixでは、あなたのウェブサイトに設置するためのカスタムチャットを作成できます。<br>
            まずは、用途に合わせたチャットをAIで作成いたしますので、<br>
            作成したいチャットの詳細を教えてください。<br>
            下のテンプレートから選んで始めることもできます。
        </p>
    </div>
    <div id="chatInput" class="input-group rounded-0 rounded-bottom mt-3 mb-4" style="bottom: 0px;right: 0;left: 0;width: auto;margin: auto;">
        <textarea rows="1" id="userMessage" class="form-control py-3" style="font-size: 14px;padding-left: 30px;" placeholder="チャットについて教えてください"></textarea>
        <button id="sendMessage" class="btn btn-light px-4 border"><i class="fas fa-paper-plane"></i></button>
        <div class="load bg-light px-4 d-flex justify-content-center align-items-center border d-none">
            <div class="spinner-grow spinner-grow-sm text-dark" role="status"><span class="visually-hidden">Loading...</span></div>
        </div>
    </div>
    <button type="button" id="displayProcess" class="badge btn-ligh text-muted border mb-2 mx-3 d-none" style="font-size: 12px;border-radius:40px">プロセスを表示する</button>

    <div id="displayProcessToggle" class="mb-3 mx-3 d-none">
        <label for="chatContent" class="form-label d-none">チャットコンテンツ (JSON形式)</label>
        <textarea class="form-control" id="chatContent" name="content" rows="10" required></textarea>
    </div>
    <form id="chatForm" class="mb-5 pb-5 mx-3">
        <div class="mb-3 mx-3">
            <label for="visibility" class="form-label"><i class="fas fa-eye"></i> 公開設定を選択してください:</label>
            <select class="form-select" id="visibility" name="visibility">
                <option value="private"><i class="fas fa-lock"></i> 非公開</option>
                <option value="public"><i class="fas fa-globe"></i> 公開</option>
            </select>
        </div>
        <div class="mb-3 mx-3" id="thumbnailInputContainer" style="display: none;">
            <label for="chatThumbnail" class="form-label">チャットのサムネイルをアップロード</label>
            <input type="file" class="form-control" id="chatThumbnail" name="thumbnail" accept="image/*">
        </div>
        <div class="mb-3 mx-3 ">
            <label for="chatName" class="form-label">名前</label>
            <input type="text" class="form-control" id="chatName" name="name" required>
        </div>
        <div class="mb-3 mx-3">
            <label for="myUrl" class="form-label">URL</label>
            <div class="input-group ">
                <input type="url" class="form-control" id="myUrl" name="url" placeholder="URLを入力してください">
                <button class="btn btn-outline-secondary" type="button" id="urlButton">
                    <i class="fas fa-search"></i>
                </button>
                <div class="load bg-light px-4 d-flex justify-content-center align-items-center border d-none url-load">
                    <div class="spinner-grow spinner-grow-sm text-dark" role="status"><span class="visually-hidden">Loading...</span></div>
                </div>
            </div>
        </div>
        <div class="mb-3 mx-3 d-none">
            <label for="chatPdf" class="form-label">PDFファイルを選択</label>
            <input type="file" id="chatPdf" class="form-control" accept="pdf" lang="ja" title="PDFファイルを選択">
        </div>
        <div id="resultContainer" class="mt-3 mx-3" style="display: none;">
            <h4>URLの概要</h4>
            <p id="resultText"></p>
        </div>
        <div class="mb-3 mx-3">
            <label for="chatCategory" class="form-label">カテゴリー</label>
            <input type="text" class="form-control" id="chatCategory" name="name" required>
        </div>
        <div class="mb-3 mx-3">
            <label for="chatDescription" class="form-label">説明</label>
            <textarea class="form-control" id="chatDescription" name="content" rows="5" required></textarea>
        </div>
        <div class="mb-3 mx-3">
            <label for="chatUrl" class="form-label d-none">URL</label>
            <input type="hidden" class="form-control" id="chatUrl" name="url">
        </div>
        <div class="mb-3 mx-3">
            <label for="chatRule" class="form-label">指示</label>
            <textarea class="form-control" id="chatRule" name="content" rows="5"></textarea>
        </div>
        <div class="container mt-1">
            <label for="chatContentEdition" class="form-label">チャットの構造</label>
            <div id="chatContentEdition"></div>
            <button type="button" id="genStructure" class="btn btn-primary" data-toggle="tooltip" title="チャット構造の生成">
                <i class="fa fa-cog fa-fw"></i>
                <i class="fa fa-spinner fa-spin fa-fw fa-hidden d-none"></i>
                チャット構造を生成する
            </button>
            <button type="button" id="addQuestionBtn" class="btn btn-light float-end" data-toggle="tooltip" title="追加" data-original-title="Share"><i class="fas fa-plus"></i> </button>
            <button type="button" id="saveButton" class="btn btn-primary mt-3 d-none">Save</button>
        </div>
        <button type="submit" class="btn btn-dark btn-large w-100 my-5" style="border-radius:50px">保存して試す</button>
    </form>
    
</div>
 {{> dashboard-footer}}
<script>
    $(document).ready(function() {
        $('.dropdown-toggle').each(function(e) {
            new mdb.Dropdown($(this)[0]);
        });
        var count = 0
        let chatId = '{{chatId}}';

        if (chatId) {
            fetchchatData(chatId);
        }
        
        var savedURL = localStorage.getItem('savedURL');
        if (savedURL) {
            $('#myUrl').val(savedURL);
            localStorage.removeItem('savedURL');
        }

        $('textarea').each(function() {
            resizeTextarea(this);
            $(this).on('input change', function() {
                resizeTextarea(this);
            });
        });

        function resizeTextarea(element){
            if($(element).val().trim()!=''){
                element.style.height = 'auto';
                element.style.height = (element.scrollHeight) + 'px';  
            }else{
                element.style.height = '60px'; 
            }
        }

        $('#myUrl').on('input change',function(){
             $('#chatUrl').val($(this).val());
        });
        function fetchUrlSummary(url) {
            $.ajax({
                url: '/api/urlsummary',
                type: 'GET',
                data: { url: url },
                success: function(response) {
                    $('#resultText').html(marked.parse(response.analysis));
                    $('#resultContainer').show();
                    $('.url-load').addClass('d-none');
                    $('#urlButton').removeClass('d-none');
                },
                error: function(xhr, status, error) {
                    $('#resultText').text('Error: ' + xhr.responseText);
                    $('#resultContainer').show();
                    $('.url-load').addClass('d-none');
                    $('#urlButton').removeClass('d-none');
                }
            });
        }

        $('#urlButton').on('click', function() {
            const url = $('#myUrl').val();
            $('#chatUrl').val(url);
            $('.url-load').removeClass('d-none');
            $('#urlButton').addClass('d-none');
            fetchUrlSummary(url);
        });

        $('#chatImage').click(function() {
            $('#chatThumbnail').click();
        });

        $('#chatThumbnail').change(function(event) {
            const reader = new FileReader();
            reader.onload = function(e) {
                $('#chatImage').attr('src', e.target.result).show();
            }
            reader.readAsDataURL(event.target.files[0]);
        });

        function fetchchatData(chatId) {
            $.ajax({
                url: `/api/chat-data/${chatId}`,
                type: 'GET',
                dataType: 'json',
                success: function(chatData) {
                    $('#chatName').val(chatData.name);
                    $('#chatCategory').val(chatData.category);
                    var chatDescriptionTextare = $('#chatDescription')
                    chatDescriptionTextare.val(chatData.description);
                    setTimeout(function(){
                        resizeTextarea(chatDescriptionTextare[0]);
                    },500)
                    var chatRuleTextarea = $('#chatRule');
                    chatRuleTextarea.val(chatData.rule);
                    setTimeout(function(){
                        resizeTextarea(chatRuleTextarea[0]);
                    },500)
                    
                    $('#chatUrl').val(chatData.url);
                    $('#myUrl').val(chatData.url);
                    if(chatData.url){
                        fetchUrlSummary(chatData.url);
                    }            
                    if(chatData.content){
                        $('#chatContent').val(JSON.stringify(chatData.content, null, 2));
                        createEditor(chatData.content)
                    }

                    if (chatData.thumbnailUrl && chatData.thumbnailUrl != undefined) {
                        $('#chatImage').attr('src', chatData.thumbnailUrl).show();
                    }
                        $('#chatForm').removeClass('d-none')
                },
                error: function(xhr, status, error) {
                    Swal.fire({
                        title: 'エラー!',
                        text: 'チャットの読み込みに失敗しました: ' + error,
                        icon: 'error',
                        confirmButtonText: 'Ok',
                        showCancelButton: true,
                        cancelButtonText: '一覧を見る'
                    }).then((result) => {
                        if (result.dismiss === Swal.DismissReason.cancel) {
                            window.location.href = '/chats';
                        }
                    });
                }
            });
        }

        $('#chatForm').on('submit', function(e) {
            e.preventDefault();

            const formData = new FormData();
            const name = $('#chatName').val();
            const category = $('#chatCategory').val();
            const description = $('#chatDescription').val();
            const rule = $('#chatRule').val();
            const url = $('#chatUrl').val();
            const pdf = $('#chatPdf')[0].files[0];
            const content = saveJson();
            const thumbnail = $('#chatThumbnail')[0].files[0];
            const visibility = $('#visibility').val()

            formData.append('name', name);
            formData.append('category', category);
            formData.append('description', description);
            formData.append('content', content);
            formData.append('rule', rule);
            formData.append('url', url);
            formData.append('visibility', visibility);
            
            if(thumbnail){
                formData.append('thumbnail', thumbnail);
            }
            if(pdf){
                formData.append('pdf',pdf)
            }
            if(chatId){
                formData.append('chatId', chatId)
            }
            $.ajax({
                url: '/api/add-chat',
                type: 'POST',
                processData: false,
                contentType: false,
                data: formData,
                success: function(response) {
                    const {chatId}=response
                    window.location = '/chat/'+chatId
                },
                error: function(error) {
                    Swal.fire(
                        'エラー!',
                        'チャットの追加に失敗しました: ' + error.responseJSON.error,
                        'error'
                    );
                }
            });
        });

   
        // Event handler for the send button
        $('#sendMessage').on('click', function() {
            
            // Generate title and description based on the cleaned content
            generateName();
            generateCategory();
            generateDescription();
            generateRule();
        });

        // Event handler for the Enter key
        $('#userMessage').on('keypress', function(event) {
            if (event.which == 13 && !event.shiftKey) { // Enter key is pressed without Shift
                // Generate title and description based on the cleaned content
                generateName();
                generateCategory();
                generateDescription();
                generateRule();
            }
        });

        $('#genStructure').click(function(){
            generateCompletion()
        })
        
        const urlParams = new URLSearchParams(window.location.search);
        const chatCategory= urlParams.get('chatCategory');
        if (chatCategory) {
            $('#chatCategory').val(chatCategory);
        }
        const userMessage = urlParams.get('userMessage');
        if (userMessage) {
            $('#userMessage').val(userMessage);
            //generateCompletion();
        }


        function generateCompletion(callback) {

            const apiUrl = '/api/openai-chat-creation';
            const chatId = 'chat_' + Date.now();

            let message = $('#userMessage').val();
            const urlSummary = $(`#resultText`).text()
            const myUrl = $('#myUrl').val()

            if(urlSummary.trim() != ''){
                message = `URL : ${myUrl} \n Content Summary : ${urlSummary}. \n\n Considering the above informations, ${message}`
            }
            
            // Clear the chatContent area only if it's not empty
            if ($('#chatContent').val().trim() !== '') {
                $('#chatContent').val('');
            }        
            $('#genStructure .fa-spinner').toggleClass('d-none')
            
            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message : getSystem('chatContent'), system : message }),
                success: function(response) {

                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                        // Update the bot response container with the new content
                        $('#chatContent').val($('#chatContent').val() + data.content);

                    };

                    eventSource.onerror = function(error) {
                        console.log('EventSource failed.');
                        eventSource.close();

                        // Clean the JSON string when the stream ends
                        let cleanedContent = cleanJsonArray(markdownContent);
                        $('#chatContent').html(cleanedContent);
                        $('#chatContent').val(cleanedContent)

                        $('#genStructure .fa-spinner').toggleClass('d-none')

                        createEditor(JSON.parse(cleanedContent))
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        function generateRule(callback) {

            let message = $('#userMessage').val();
            const urlSummary = $(`#resultText`).text()
            const myUrl = $('#myUrl').val()

            if(urlSummary.trim() != ''){
                message = `URL : ${myUrl} \n Content Summary : ${urlSummary}. \n\n Considering the above informations, ${message}`
            }
            const apiUrl = '/api/openai-chat-creation';
            if ($('#chatRule').val().trim() !== '') {
                return
            }   
            $('#chatRule').val('')
            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message, system : getSystem('chatRule') }),
                success: function(response) {

                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                        // Update the bot response container with the new content
                        $('#chatRule').val(marked.parse(markdownContent));

                    };

                    eventSource.onerror = function(error) {
                        console.log('EventSource failed.');
                        eventSource.close();
                        resizeTextarea($('#chatRule')[0])
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        function generateQuestion(cleanedContent, chatId, callback) {

            const apiUrl = '/api/openai-chat-creation';

            const description = $('#chatDescription').val()
            const category = $('#chatCategory').val()
            const name = $('#chatName').val()
            const message = `Name : ${name} \n Category: ${category} \n Description: ${description} \n JSON : ${cleanedContent}`

            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message, system : getSystem('chatQuestion') }),
                success: function(response) {

                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                    };

                    eventSource.onerror = function(error) {
                        eventSource.close();
                        if(callback){callback(markdownContent)}
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        function generateDescription() {

            let message = $('#userMessage').val();
            const urlSummary = $(`#resultText`).text()
            const myUrl = $('#myUrl').val()

            if(urlSummary.trim() != ''){
                message = `URL : ${myUrl} \n Content Summary : ${urlSummary}. \n\n Considering the above informations, ${message}`
            }
            const apiUrl = '/api/openai-chat-creation';
            // Clear the chatContent area only if it's not empty
            if ($('#chatDescription').val().trim() !== '') {
                $('#chatDescription').val('');
            }        

            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message, system : getSystem('chatDescription') }),
                success: function(response) {

                    $('#chatDescription').html('')
                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                        // Update the bot response container with the new content
                        $('#chatDescription').val($('#chatDescription').val() + data.content);

                    };

                    eventSource.onerror = function(error) {
                        console.log('EventSource failed.');
                        eventSource.close();
                        resizeTextarea($('#chatDescription')[0])
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        function generateCategory() {

            let message = $('#userMessage').val();
            const urlSummary = $(`#resultText`).text()
            const myUrl = $('#myUrl').val()

            if(urlSummary.trim() != ''){
                message = `URL : ${myUrl} \n Content Summary : ${urlSummary}. \n\n Considering the above informations, ${message}`
            }

            const apiUrl = '/api/openai-chat-creation';
            
            $('#chatCategory').val('')
            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message, system : getSystem('chatCategory') }),
                success: function(response) {

                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                        // Update the bot response container with the new content
                        $('#chatCategory').val(markdownContent);

                    };

                    eventSource.onerror = function(error) {
                        console.log('EventSource failed.');
                        eventSource.close();
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        function generateName() {

            let message = $('#userMessage').val();
            const urlSummary = $(`#resultText`).text()
            const myUrl = $('#myUrl').val()

            if(urlSummary.trim() != ''){
                message = `URL : ${myUrl} \n Content Summary : ${urlSummary}. \n\n Considering the above informations, ${message}`
            }

            const apiUrl = '/api/openai-chat-creation';
            
            $('#chatName').val('')
            $.ajax({
                url: apiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ chatId, message, system : getSystem('chatName') }),
                success: function(response) {

                    const sessionId = response.sessionId;
                    const streamUrl = `/api/openai-chat-creation-stream/${sessionId}`;
                    const eventSource = new EventSource(streamUrl);
                    let markdownContent = "";

                    eventSource.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        markdownContent += data.content;

                        // Update the bot response container with the new content
                        $('#chatName').val(markdownContent);

                    };

                    eventSource.onerror = function(error) {
                        console.log('EventSource failed.');
                        eventSource.close();
                    };
                },
                error: function(error) {
                    console.error('Error:', error);
                }
            });
        }
        function cleanJsonString(jsonString) {
            // Remove all characters before the first '{'
            let start = jsonString.indexOf('{');
            if (start !== -1) {
                jsonString = jsonString.substring(start);
            }

            // Remove all characters after the last '}'
            let end = jsonString.lastIndexOf('}');
            if (end !== -1) {
                jsonString = jsonString.substring(0, end + 1);
            }

            return jsonString;
        }
        function cleanJsonArray(jsonString) {
            // Remove all characters before the first '{'
            let start = jsonString.indexOf('[');
            if (start !== -1) {
                jsonString = jsonString.substring(start);
            }

            // Remove all characters after the last '}'
            let end = jsonString.lastIndexOf(']');
            if (end !== -1) {
                jsonString = jsonString.substring(0, end + 1);
            }

            return jsonString;
        }
        function getSystem(systemType){
            var system;

            switch (systemType) {
                case 'chatRule':
                    system = `
                        You are a japanese chatbot tone explanator. \n
                        You take the provided content by the user and you explain the chatbot character, how it aswwer, which tone.Respond in plain text. ONLY THE TONE EXPLANATION IN JAPANESE.NO COMMENTS.
                    `;
                    break;
                case 'chatQuestion':
                    system = `
                        You are a JSON generator. 
                        You take the information and the JSON provided by the user and return a new question on the same subject.\n
                        Your answer must be in japanese. Be creative to provide interesting questions.\n
                        You respond MUST MATCH THE JSON BELOW.\n\n
                        {
                            "question": "string",
                            "responses": [
                            "string",
                            "string",
                            "string"
                            ]
                        }
                    `;
                    break;
                case 'chatDescription':
                    system = `
                        You are a JSON description generator. You take the provided content by the user and return a short description of 2 sentences in japanese.
                        You should respond in plain text with the description ONLY.NO COMMENTS.
                    `;
                    break;
                case 'chatName':
                    system = `
                        You are a JSON title generator. You take the provided content by the user and return a title in japanese.
                        You should respond in plain text with the title ONLY.NO COMMENTS.
                    `;
                    break;
                case 'chatCategory':
                    system = `
                        You are a JSON category generator. You take the provided content by the user and return a category in japanese.
                        You should respond in plain text with the category ONLY. NO COMMENTS.
                    `;
                    break;
                case "chatContent":
                    system = `
                    Provide conversation starters. It must sound like we are chatting, stay in your role.\n
                    responses is used help me respond to you. If I should instead write something, keep responses empty.\n
                    You respond IN JAPANESE AND MUST MATCH THE JSON BELOW.\n\n
                    [
                        {
                            "question": "string",
                            "responses": [
                            "string",
                            "string",
                            "string"
                            ]
                        },
                        {
                            "question": "string",
                            "responses": [
                            "string",
                            "string",
                            "string"
                            ]
                        }
                    ]
                    `;
                    break;
                default:
                    system = "Your are a useful assistant.";
                    break;
                    
            }
            return system
        }
        function createEditor(json) {
            $('#chatContentEdition').empty(); // Clear previous content
            json.forEach((qa, index) => {
                const qaDiv = $('<div></div>').addClass('qa card mb-3 bg-light');
                const qaCardBody = $('<div></div>').addClass('card-body');

                // Question
                qaCardBody.append(`<h5 class="card-title">質問 ${index + 1}</h5>`);
                qaCardBody.append(`<div class="mb-3"><label class="form-label">質問:</label><input type="text" class="form-control question" value="${qa.question}" /></div>`);

                // Responses
                qa.responses.forEach((response, responseIndex) => {
                    const responseDiv = $('<div class="ps-5"></div>').addClass('response mb-3');
                    responseDiv.append(`<h6>回答 ${responseIndex + 1}</h6>`);
                    responseDiv.append(`<div class="mb-2"><label class="form-label">回答テキスト:</label><input type="text" class="form-control responseText" value="${response}" /></div>`);
                    qaCardBody.append(responseDiv);
                });

                // Add Regenerate and Delete buttons
                const buttonGroup = $('<div class="position-absolute"></div>').addClass('button-group mt-3');

                const regenerateButton = $(`<button type="button" data-toggle="tooltip" title="再生成" data-original-title="Regenerate"></button>`).addClass('btn btn-outline-warning me-2 gen-question').html('<i class="fas fa-sync"></i>').click(() => {
                    Swal.fire({
                        title: '再生成',
                        text: `質問 ${index + 1} を再生成しますか？`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'はい',
                        cancelButtonText: 'いいえ'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            const questionIndex = index + 1
                            const cleanedContent = saveJson();
                            generateQuestion(cleanedContent, chatId, function(response){
                                const cleanResponse = JSON.parse(response)
                                updateQuestion(cleanResponse, index)
                                saveJson();
                                Swal.fire(
                                    '再生成しました!',
                                    `質問 ${index + 1} が再生成されました。`,
                                    'success'
                                );
                            })
                        }
                    });
                });

                const deleteButton = $('<button type="button" data-toggle="tooltip" title="削除" data-original-title="Delete"></button>').addClass('btn btn-outline-danger').html('<i class="fas fa-trash"></i>').click(() => {
                    Swal.fire({
                        title: '削除',
                        text: `質問 ${index + 1} を削除しますか？`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'はい',
                        cancelButtonText: 'いいえ'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            qaDiv.remove();
                            const cleanJSON = saveJson();
                            const parsedJson = JSON.parse(cleanJSON)
                            createEditor(parsedJson)
                        }
                    });
                });
                buttonGroup.append(regenerateButton, deleteButton);
                qaCardBody.append(buttonGroup);

                qaDiv.append(qaCardBody);
                $('#chatContentEdition').append(qaDiv);
            });
        }


        function addNewQuestion() {
            const newIndex = $('#chatContentEdition .qa').length + 1;
            if(newIndex>10){
                Swal.fire({
                    title: '警告',
                    text: '質問は最大10件までです。',
                    icon: 'warning',
                    confirmButtonText: '了解'
                });
                return
            }
            const newQaDiv = $('<div></div>').addClass('qa card mb-3 bg-light');
            const newQaCardBody = $('<div></div>').addClass('card-body');

            // New Question
            newQaCardBody.append(`<h5 class="card-title">質問 ${newIndex}</h5>`);
            newQaCardBody.append(`<div class="mb-3"><label class="form-label">質問:</label><input type="text" class="form-control question" value="" /></div>`);

            // Add empty response sections
            for (let i = 1; i <= 3; i++) {
                const newResponseDiv = $('<div class="ps-5"></div>').addClass('response mb-3');
                newResponseDiv.append(`<h6>回答 ${i}</h6>`);
                newResponseDiv.append(`<div class="mb-2"><label class="form-label">回答テキスト:</label><input type="text" class="form-control responseText" value="" /></div>`);
                newQaCardBody.append(newResponseDiv);
            }

            // Add Regenerate and Delete buttons
            const buttonGroup = $('<div class="position-absolute"></div>').addClass('button-group mt-3');

            const regenerateButton = $(`<button type="button" data-toggle="tooltip" title="再生成" data-original-title="Regenerate" data-index="${newIndex}"></button>`).addClass('btn btn-outline-warning me-2 gen-question').html('<i class="fas fa-sync"></i>').click(() => {
                Swal.fire({
                    title: '再生成',
                    text: `質問 ${newIndex} を再生成しますか？`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'はい',
                    cancelButtonText: 'いいえ'
                }).then((result) => {
                    if (result.isConfirmed) {
                        const cleanedContent = saveJson();
                        generateQuestion(cleanedContent, chatId, function(response){
                            const cleanResponse = JSON.parse(response)
                            updateQuestion(cleanResponse, newIndex-1)
                            saveJson();
                            // Handle regenerate logic here
                            Swal.fire(
                                '再生成しました!',
                                `質問 ${newIndex} が再生成されました。`,
                                'success'
                            );
                        })
                    }
                });
            });

            const deleteButton = $('<button type="button" data-toggle="tooltip" title="削除" data-original-title="Delete"></button>').addClass('btn btn-outline-danger').html('<i class="fas fa-trash"></i>').click(() => {
                Swal.fire({
                    title: '削除',
                    text: `質問 ${newIndex} を削除しますか？`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'はい',
                    cancelButtonText: 'いいえ'
                }).then((result) => {
                    if (result.isConfirmed) {
                        newQaDiv.remove();
                        const cleanJSON = saveJson();
                        const parsedJson = JSON.parse(cleanJSON)
                        createEditor(parsedJson)
                    }
                });
            });

            buttonGroup.append(regenerateButton, deleteButton);
            newQaCardBody.append(buttonGroup);

            newQaDiv.append(newQaCardBody);
            $('#chatContentEdition').append(newQaDiv);
        }

        $('#addQuestionBtn').on('click', addNewQuestion);
        
        function updateQuestion(obj, index) {
            // Find the corresponding question card based on the index
            const qaCard = $('#chatContentEdition .qa').eq(index);

            if (qaCard.length > 0) {
                // Update the question text
                const questionInput = qaCard.find('.question');
                questionInput.val(obj.question);

                // Update the responses
                const responseDivs = qaCard.find('.response');
                responseDivs.each((responseIndex, responseDiv) => {
                    const responseInput = $(responseDiv).find('.responseText');
                    if (obj.responses[responseIndex] !== undefined) {
                        responseInput.val(obj.responses[responseIndex]);
                    } else {
                        responseInput.val('');
                    }
                });

                // Handle additional responses if there are more in the object than in the current card
                if (obj.responses.length > responseDivs.length) {
                    const qaCardBody = qaCard.find('.card-body');
                    for (let i = responseDivs.length; i < obj.responses.length; i++) {
                        const newResponseDiv = $('<div class="ps-5"></div>').addClass('response mb-3');
                        newResponseDiv.append(`<h6>回答 ${i + 1}</h6>`);
                        newResponseDiv.append(`<div class="mb-2"><label class="form-label">回答テキスト:</label><input type="text" class="form-control responseText" value="${obj.responses[i]}" /></div>`);
                        qaCardBody.append(newResponseDiv);
                    }
                }
            } else {
                console.error(`No question found at index ${index}`);
            }
        }
        function saveJson() {
            const updatedJson = [];
            $('.qa').each(function(index, qaDiv) {
                const qaData = {
                    question: $(qaDiv).find('.question').val(),
                    responses: []
                };

                $(qaDiv).find('.response').each(function(responseIndex, responseDiv) {
                    const responseText = $(responseDiv).find('.responseText').val();
                    qaData.responses.push(responseText);
                });

                updatedJson.push(qaData);
            });

            //console.log(JSON.stringify(updatedJson, null, 2));
            $('#chatContent').val(JSON.stringify(updatedJson, null, 2));
            return JSON.stringify(updatedJson, null, 2);
        }

        $('#saveButton').click(function() {
            saveJson();
        });
        $('#displayProcess').click(function(){
            $('#displayProcessToggle').toggleClass('d-none')
        })
    });
</script>
</body>
</html>
